const customConsole = {
    setupCustomConsole() {
        const panelStyles = {
            position: "fixed",
            top: "10px",
            right: "10px",
            width: "400px",
            minWidth: "400px",
            maxWidth: "400px",
            height: "300px",
            overflowY: "auto",
            backgroundColor: "rgba(0, 0, 0, 0.9)",
            color: "white",
            fontSize: "14px",
            padding: "10px",
            zIndex: "9999",
            borderRadius: "5px",
            border: "1px solid #ccc",
            display: "flex",
            flexDirection: "column",
            overflowX: "hidden",
            boxSizing: "border-box",
            whiteSpace: "pre-wrap",
            resize: "vertical",
        };

        const logEntryStyles = {
            color: "#0ea5e9", // Light blue for symbols and keys
        };

        const logStyles = {
            color: "#d946ef", // Pink for values
        };

        const errorStyles = {
            color: "#f43f5e", // Reddish for errors
        };

        const exceptionStyles = {
            color: "orange", // Orange for exceptions
        };

        const separatorStyles = {
            border: "none",
            borderTop: "1px solid #ccc",
            margin: "5px 0",
        };

        // Create the debug panel
        const debugPanel = document.createElement("div");
        Object.assign(debugPanel.style, panelStyles);
        document.body.appendChild(debugPanel);

        // Save original console methods
        const originalConsoleLog = console.log;
        const originalConsoleError = console.error;

        // Utility to wrap content in styled span
        function span(content, color) {
            return `<span style="color: ${color};">${content}</span>`;
        }

        // Format objects/arrays with proper styling
        function formatValue(value, level = 0) {
            const indent = " ".repeat(level * 4);

            if (Array.isArray(value)) {
                if (value.length === 0) {
                    return `${span("[ ]", logEntryStyles.color)}`;
                }
                const items = value
                    .map(
                        (item) => `${indent}    ${formatValue(item, level + 1)}`
                    )
                    .join(",\n");
                return `${span(
                    "[",
                    logEntryStyles.color
                )}\n${items}\n${indent}${span("]", logEntryStyles.color)}`;
            } else if (typeof value === "object" && value !== null) {
                if (Object.keys(value).length === 0) {
                    return `${span("{ }", logEntryStyles.color)}`;
                }
                const entries = Object.entries(value)
                    .map(
                        ([key, val]) =>
                            `${indent}    ${span(
                                `"${key}"`,
                                logEntryStyles.color
                            )}: ${formatValue(val, level + 1)}`
                    )
                    .join(",\n");
                return `${span(
                    "{",
                    logEntryStyles.color
                )}\n${entries}\n${indent}${span("}", logEntryStyles.color)}`;
            }

            return span(JSON.stringify(value), logStyles.color);
        }

        // Override console.log
        console.log = function (...args) {
            const logEntry = document.createElement("div");
            logEntry.style.marginBottom = "5px";
            logEntry.innerHTML =
                "<pre style='white-space: pre-wrap; word-wrap: break-word;'>" +
                args.map((arg) => formatValue(arg)).join(" ") +
                "</pre>";

            const separator = document.createElement("hr");
            Object.assign(separator.style, separatorStyles);

            debugPanel.appendChild(logEntry);
            debugPanel.appendChild(separator);

            debugPanel.scrollTop = debugPanel.scrollHeight;

            originalConsoleLog.apply(console, args);
        };

        // Override console.error
        console.error = function (...args) {
            const logEntry = document.createElement("div");
            logEntry.style.marginBottom = "5px";
            logEntry.innerHTML =
                "<pre style='white-space: pre-wrap; word-wrap: break-word;'>" +
                args
                    .map((arg) => span(formatValue(arg), errorStyles.color))
                    .join(" ") +
                "</pre>";

            const separator = document.createElement("hr");
            Object.assign(separator.style, separatorStyles);

            debugPanel.appendChild(logEntry);
            debugPanel.appendChild(separator);

            debugPanel.scrollTop = debugPanel.scrollHeight;

            originalConsoleError.apply(console, args);
        };

        // Global error handling for exceptions
        window.onerror = function (message) {
            const logEntry = document.createElement("div");
            logEntry.style.marginBottom = "5px";
            logEntry.innerHTML =
                "<pre style='white-space: pre-wrap; word-wrap: break-word;'>" +
                span(formatValue(message), exceptionStyles.color) +
                "</pre>";

            const separator = document.createElement("hr");
            Object.assign(separator.style, separatorStyles);

            debugPanel.appendChild(logEntry);
            debugPanel.appendChild(separator);

            debugPanel.scrollTop = debugPanel.scrollHeight;

            return true;
        };
    },
};

export default customConsole;
